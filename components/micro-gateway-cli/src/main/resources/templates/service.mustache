import ballerina/http;
import ballerina/runtime;{{#importModules}}
import {{.}};{{/importModules}}
{{#if containerConfig.hasKubernetes}}import ballerina/kubernetes;{{/if}}
import wso2/gateway;
{{#if hasEpSecurity}}
    import ballerina/auth;
{{/if}}
{{#equals endpointConfig.prodEndpoints.type "http"}}
    {{#endpointConfig.prodEndpoints}}{{>basicAuthHandler}}{{>httpEndpoint}}{{/endpointConfig.prodEndpoints}}
{{/equals}}
{{#equals endpointConfig.sandEndpoints.type "http"}}
    {{#endpointConfig.sandEndpoints}}{{>basicAuthHandler}}{{>httpEndpoint}}{{/endpointConfig.sandEndpoints}}
{{/equals}}
{{#equals endpointConfig.prodEndpoints.type "load_balance"}}
    {{#endpointConfig.prodEndpoints}}{{>basicAuthHandler}}{{>lbEndpoint}}{{/endpointConfig.prodEndpoints}}
{{/equals}}
{{#equals endpointConfig.sandEndpoints.type "load_balance"}}
    {{#endpointConfig.sandEndpoints}}{{>basicAuthHandler}}{{>lbEndpoint}}{{/endpointConfig.sandEndpoints}}
{{/equals}}
{{#equals endpointConfig.prodEndpoints.type "failover"}}
    {{#endpointConfig.prodEndpoints}}{{>basicAuthHandler}}{{>failoverEndpoint}}{{/endpointConfig.prodEndpoints}}
{{/equals}}
{{#equals endpointConfig.sandEndpoints.type "failover"}}
    {{#endpointConfig.sandEndpoints}}{{>basicAuthHandler}}{{>failoverEndpoint}}{{/endpointConfig.sandEndpoints}}
{{/equals}}

{{#paths}}{{#value}}{{#operations}}{{#value}}
    {{#equals epConfig.prodEndpoints.type "http"}} {{#epConfig.prodEndpoints}}{{>basicAuthHandler}}{{>httpResourceEndpoint}}{{/epConfig.prodEndpoints}} {{/equals}}
    {{#equals epConfig.sandEndpoints.type "http"}} {{#epConfig.sandEndpoints}}{{>basicAuthHandler}}{{>httpResourceEndpoint}}{{/epConfig.sandEndpoints}} {{/equals}}
    {{#equals epConfig.prodEndpoints.type "load_balance"}} {{#epConfig.prodEndpoints}}{{>basicAuthHandler}}{{>lbResourceEndpoint}}{{/epConfig.prodEndpoints}} {{/equals}}
    {{#equals epConfig.sandEndpoints.type "load_balance"}} {{#epConfig.sandEndpoints}}{{>basicAuthHandler}}{{>lbResourceEndpoint}}{{/epConfig.sandEndpoints}} {{/equals}}
    {{#equals epConfig.prodEndpoints.type "failover"}} {{#epConfig.prodEndpoints}}{{>basicAuthHandler}}{{>failoverResourceEndpoint}}{{/epConfig.prodEndpoints}} {{/equals}}
    {{#equals epConfig.sandEndpoints.type "failover"}} {{#epConfig.sandEndpoints}}{{>basicAuthHandler}}{{>failoverResourceEndpoint}}{{/epConfig.sandEndpoints}} {{/equals}}

    {{#if @root.requestInterceptor}}
    int {{operationId}}_api_request_interceptor_index = -1;
    {{/if}}
    {{#if @root.responseInterceptor}}
    int {{operationId}}_api_response_interceptor_index = -1;
    {{/if}}

    {{#if requestInterceptor}}
    int {{operationId}}_request_interceptor_index = -1;
    {{/if}}
    {{#if responseInterceptor}}
    int {{operationId}}_response_interceptor_index = -1;
    {{/if}}

{{/value}}{{/operations}}{{/value}}{{/paths}}

//This variable is added for logging purposes
string {{cut qualifiedServiceName " "}}Key = "{{api.apiInfo.name}}-{{api.apiInfo.version}}";

{{>kubernetes}}

@http:ServiceConfig {
    basePath: "{{basepath}}"{{!-- {{only one base path is allowed for all  endpoints}} --}},
    auth: {
        authHandlers: gateway:getAuthHandlers([{{#authProviders}}"{{.}}"{{#unless @last}},{{/unless}}{{/authProviders}}], {{applicationSecurityOptional}}, {{isMutualSSL}})
    }
   {{#api.apiInfo.corsConfiguration.corsConfigurationEnabled}},
    cors: {
         allowOrigins: [{{#api.apiInfo.corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.apiInfo.corsConfiguration.accessControlAllowOrigins}}],
         allowCredentials: {{api.apiInfo.corsConfiguration.accessControlAllowCredentials}},
         allowHeaders: [{{#api.apiInfo.corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.apiInfo.corsConfiguration.accessControlAllowHeaders}}],
         allowMethods: [{{#api.apiInfo.corsConfiguration.accessControlAllowMethods}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.apiInfo.corsConfiguration.accessControlAllowMethods}}],
         exposeHeaders: [{{#api.apiInfo.corsConfiguration.accessControlExposeHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.apiInfo.corsConfiguration.accessControlExposeHeaders}}]
    }
    {{/api.apiInfo.corsConfiguration.corsConfigurationEnabled}}
}

@gateway:API {
    publisher:"{{api.apiInfo.provider}}",
    name:"{{api.apiInfo.name}}",
    apiVersion: "{{api.apiInfo.version}}",
    apiTier : "{{api.apiInfo.apiLevelPolicy}}" {{#if api.apiInfo.authorizationHeader}},
    authorizationHeader : "{{api.apiInfo.authorizationHeader}}" {{/if}},
    authProviders: [{{#authProviders}}"{{.}}"{{#unless @last}},{{/unless}}{{/authProviders}}],
    security: {
            "apikey":[{{#apiKeys}} { "in": "{{in}}", "name": "{{name}}" } {{#unless @last}},{{/unless}}{{/apiKeys}}],
            "mutualSSL": "{{mutualSSLClientVerification}}",
            "applicationSecurityOptional": {{applicationSecurityOptional}}
        }
}
service {{cut qualifiedServiceName " "}} on {{#api.apiInfo.transport}}{{#equals . "http"}}apiListener{{#unless @last}},
{{/unless}}{{/equals}}{{#equals . "https"}}apiSecureListener{{/equals}}{{/api.apiInfo.transport}} {
{{#paths}}{{#value}}{{#operations}}{{#value}}

    @http:ResourceConfig {
        methods:["{{upper key}}"],
        path:"{{../../key}}",
        auth:{
        {{#if isSecured}}
            {{#if scope}}
                scopes: [{{{scope}}}], {{/if}}
        {{else}}
            enabled:false,
        {{/if}}
            authHandlers: gateway:getAuthHandlers([{{#authProviders}}"{{.}}"{{#unless @last}},{{/unless}}{{/authProviders}}], {{applicationSecurityOptional}}, {{isMutualSSL}})
        }
    }
    @gateway:Resource {
        authProviders: [{{#authProviders}}"{{.}}"{{#unless @last}},{{/unless}}{{/authProviders}}],
        security: {
            "apikey":[{{#apiKeys}} { "in": "{{in}}", "name": "{{name}}" } {{#unless @last}},{{/unless}}{{/apiKeys}}],
            "applicationSecurityOptional": {{applicationSecurityOptional}} 
            }
    }
    @gateway:RateLimit{policy : "{{resourceTier}}"}
    resource function {{operationId}} (http:Caller outboundEp, http:Request req{{>pathParameters}}) {
        {{cut qualifiedServiceName " "}}_{{operationId}}_resourceFunction(outboundEp, req{{#pathParameters}},
        {{{escapedName}}} {{/pathParameters}});
    }
{{/value}}{{/operations}}{{/value}}{{/paths}}
}

    function handleExpectHeaderFor{{cut qualifiedServiceName " "}} (http:Caller outboundEp, http:Request req ) {
        if (req.expects100Continue()) {
            req.removeHeader("Expect");
            var result = outboundEp->continue();
            if (result is error) {
            gateway:printError({{cut qualifiedServiceName " "}}Key, "Error while sending 100 continue response", result);
            }
        }
    }

function getUrlOfEtcdKeyForReInit{{cut qualifiedServiceName " "}}(string defaultUrlRef,string etcdRef, string defaultUrl, string etcdKey) returns string {
    string retrievedEtcdKey = <string> gateway:retrieveConfig(etcdRef,etcdKey);
    map<any> urlChangedMap = gateway:getUrlChangedMap();
    urlChangedMap[<string> retrievedEtcdKey] = false;
    map<string> etcdUrls = gateway:getEtcdUrlsMap();
    string url = <string> etcdUrls[retrievedEtcdKey];
    if (url == "") {
        return <string> gateway:retrieveConfig(defaultUrlRef, defaultUrl);
    } else {
        return url;
    }
}

function respondFromJavaInterceptor{{cut qualifiedServiceName " "}}(runtime:InvocationContext invocationContext, http:Caller outboundEp) returns boolean {
    boolean tryRespond = false;
    if(invocationContext.attributes.hasKey(gateway:RESPOND_DONE) && invocationContext.attributes.hasKey(gateway:RESPONSE_OBJECT)) {
        if(<boolean>invocationContext.attributes[gateway:RESPOND_DONE]) {
            http:Response clientResponse = <http:Response>invocationContext.attributes[gateway:RESPONSE_OBJECT];
            var outboundResult = outboundEp->respond(clientResponse);
            if (outboundResult is error) {
                gateway:printError({{cut qualifiedServiceName " "}}Key, "Error when sending response from the interceptor", outboundResult);
            }
            tryRespond = true;
        }
    }
    return tryRespond;
}

function initInterceptorIndexes{{cut qualifiedServiceName " "}}() {
{{#paths}}{{#value}}{{#operations}}{{#value}}
    {{#if @root.requestInterceptor}}
    {{operationId}}_api_request_interceptor_{{cut qualifiedServiceName " "}}();
    {{/if}}
    {{#if @root.responseInterceptor}}
    {{operationId}}_api_response_interceptor_{{cut qualifiedServiceName " "}}();
    {{/if}}
    {{#if requestInterceptor}}
    {{operationId}}_request_interceptor_{{cut qualifiedServiceName " "}}();
    {{/if}}
    {{#if responseInterceptor}}
    {{operationId}}_response_interceptor_{{cut qualifiedServiceName " "}}();
    {{/if}}
{{/value}}{{/operations}}{{/value}}{{/paths}}
}